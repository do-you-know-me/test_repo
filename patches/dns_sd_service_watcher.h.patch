--- a/openscreen/discovery/public/dns_sd_service_watcher.h	2021-09-20 08:26:31.088316054 +0800
+++ b/openscreen/discovery/public/dns_sd_service_watcher.h	2021-09-20 08:18:54.554578615 +0800
@@ -52,7 +52,7 @@
   // which it is called.
   
   using ServicesUpdatedCallback = 
-      std::function<void(std::vector<ConstRefT> services)>;
+      std::function<void(std::vector<ConstRefT> services, ConstRefT info, ServicesUpdatedState state)>;
 
   // This function type is responsible for converting from a DNS service
   // instance (received from another mDNS endpoint) to a T type to be returned
@@ -151,7 +151,7 @@
     }
     records_[GetKey(new_endpoint)] =
         std::make_unique<T>(std::move(record.value()));
-    callback_(GetServices());
+    callback_(GetServices(), record.value(), ServicesUpdatedState::EndpointCreated);
   }
 
   void OnEndpointUpdated(const DnsSdInstanceEndpoint& modified_endpoint) override {
@@ -166,7 +166,7 @@
       auto ptr = std::make_unique<T>(std::move(record.value()));
       it->second.swap(ptr);
 
-      callback_(GetServices());
+      callback_(GetServices(), record.value(), ServicesUpdatedState::EndpointUpdated);
     } else {
       OSP_LOG_INFO
           << "Received modified record for non-existent DNS-SD Instance "
@@ -175,8 +175,14 @@
   }
 
   void OnEndpointDeleted(const DnsSdInstanceEndpoint& old_endpoint) override {
+    ErrorOr<T> record = conversion_(old_endpoint);
     if (records_.erase(GetKey(old_endpoint))) {
-      callback_(GetServices());
+      if (record.is_error()) {
+        OSP_LOG_INFO << "Conversion of received record failed with error: "
+                     << record.error();
+        return;
+      }
+      callback_(GetServices(), record.value(), ServicesUpdatedState::EndpointDeleted);
     } else {
       OSP_LOG_INFO
           << "Received deletion of record for non-existent DNS-SD Instance "
